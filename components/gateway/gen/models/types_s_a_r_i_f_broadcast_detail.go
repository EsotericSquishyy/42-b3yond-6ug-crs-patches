// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesSARIFBroadcastDetail types s a r i f broadcast detail
//
// swagger:model types.SARIFBroadcastDetail
type TypesSARIFBroadcastDetail struct {

	// String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability
	// Required: true
	Metadata interface{} `json:"metadata"`

	// SARIF Report compliant with provided schema
	// Required: true
	Sarif interface{} `json:"sarif"`

	// sarif id
	// Required: true
	// Format: uuid
	SarifID *strfmt.UUID `json:"sarif_id"`

	// task id
	// Required: true
	// Format: uuid
	TaskID *strfmt.UUID `json:"task_id"`
}

// Validate validates this types s a r i f broadcast detail
func (m *TypesSARIFBroadcastDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSarif(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSarifID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesSARIFBroadcastDetail) validateMetadata(formats strfmt.Registry) error {

	if m.Metadata == nil {
		return errors.Required("metadata", "body", nil)
	}

	return nil
}

func (m *TypesSARIFBroadcastDetail) validateSarif(formats strfmt.Registry) error {

	if m.Sarif == nil {
		return errors.Required("sarif", "body", nil)
	}

	return nil
}

func (m *TypesSARIFBroadcastDetail) validateSarifID(formats strfmt.Registry) error {

	if err := validate.Required("sarif_id", "body", m.SarifID); err != nil {
		return err
	}

	if err := validate.FormatOf("sarif_id", "body", "uuid", m.SarifID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TypesSARIFBroadcastDetail) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	if err := validate.FormatOf("task_id", "body", "uuid", m.TaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types s a r i f broadcast detail based on context it is used
func (m *TypesSARIFBroadcastDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesSARIFBroadcastDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesSARIFBroadcastDetail) UnmarshalBinary(b []byte) error {
	var res TypesSARIFBroadcastDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
