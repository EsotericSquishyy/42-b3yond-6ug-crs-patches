// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesSourceType types source type
//
// swagger:model types.SourceType
type TypesSourceType string

func NewTypesSourceType(value TypesSourceType) *TypesSourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesSourceType.
func (m TypesSourceType) Pointer() *TypesSourceType {
	return &m
}

const (

	// TypesSourceTypeRepo captures enum value "repo"
	TypesSourceTypeRepo TypesSourceType = "repo"

	// TypesSourceTypeFuzzDashTooling captures enum value "fuzz-tooling"
	TypesSourceTypeFuzzDashTooling TypesSourceType = "fuzz-tooling"

	// TypesSourceTypeDiff captures enum value "diff"
	TypesSourceTypeDiff TypesSourceType = "diff"
)

// for schema
var typesSourceTypeEnum []interface{}

func init() {
	var res []TypesSourceType
	if err := json.Unmarshal([]byte(`["repo","fuzz-tooling","diff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesSourceTypeEnum = append(typesSourceTypeEnum, v)
	}
}

func (m TypesSourceType) validateTypesSourceTypeEnum(path, location string, value TypesSourceType) error {
	if err := validate.EnumCase(path, location, value, typesSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types source type
func (m TypesSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types source type based on context it is used
func (m TypesSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
