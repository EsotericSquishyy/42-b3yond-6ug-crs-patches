// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesStatus types status
//
// swagger:model types.Status
type TypesStatus struct {

	// This is optional arbitrary content that may be logged in error cases, but is mainly for interactive troubleshooting.
	Details map[string]string `json:"details,omitempty"`

	// Boolean indicating if the CRS is prepared to work on tasks. Do not return true unless you have successfully tested connectivity to the Competition API via /v1/ping/
	// Required: true
	Ready *bool `json:"ready"`

	// Last time task and submission stats were reset.  Unix timestamp at millisecond resolution.
	// Required: true
	Since *int64 `json:"since"`

	// State of the currently running tasks and submissions
	// Required: true
	State struct {
		TypesStatusState
	} `json:"state"`

	// Version string for verification and reproducibility.
	//
	// - git commit
	//
	// - SemVer
	//
	// - etc
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this types status
func (m *TypesStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesStatus) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("ready", "body", m.Ready); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatus) validateSince(formats strfmt.Registry) error {

	if err := validate.Required("since", "body", m.Since); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatus) validateState(formats strfmt.Registry) error {

	return nil
}

func (m *TypesStatus) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this types status based on the context it is used
func (m *TypesStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TypesStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesStatus) UnmarshalBinary(b []byte) error {
	var res TypesStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
