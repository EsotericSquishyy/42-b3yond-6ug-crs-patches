// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesStatusTasksState types status tasks state
//
// swagger:model types.StatusTasksState
type TypesStatusTasksState struct {

	// Number of tasks that competition infrastructure has cancelled
	// Required: true
	Canceled *int64 `json:"canceled"`

	// Number of tasks that the CRS encountered an unrecoverable issue for
	// Required: true
	Errored *int64 `json:"errored"`

	// Number of submissions that the competition infrastructure marked failed
	// Required: true
	Failed *int64 `json:"failed"`

	// Number of tasks that the CRS has not started work on
	// Required: true
	Pending *int64 `json:"pending"`

	// Number of tasks that the CRS is currently processing
	// Required: true
	Processing *int64 `json:"processing"`

	// Number of submissions that the competition infrastructure marked passed
	// Required: true
	Succeeded *int64 `json:"succeeded"`

	// Number of submissions that the competition infrastructure is currently testing
	// Required: true
	Waiting *int64 `json:"waiting"`
}

// Validate validates this types status tasks state
func (m *TypesStatusTasksState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanceled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSucceeded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesStatusTasksState) validateCanceled(formats strfmt.Registry) error {

	if err := validate.Required("canceled", "body", m.Canceled); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validateErrored(formats strfmt.Registry) error {

	if err := validate.Required("errored", "body", m.Errored); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validateFailed(formats strfmt.Registry) error {

	if err := validate.Required("failed", "body", m.Failed); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validatePending(formats strfmt.Registry) error {

	if err := validate.Required("pending", "body", m.Pending); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validateProcessing(formats strfmt.Registry) error {

	if err := validate.Required("processing", "body", m.Processing); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validateSucceeded(formats strfmt.Registry) error {

	if err := validate.Required("succeeded", "body", m.Succeeded); err != nil {
		return err
	}

	return nil
}

func (m *TypesStatusTasksState) validateWaiting(formats strfmt.Registry) error {

	if err := validate.Required("waiting", "body", m.Waiting); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types status tasks state based on context it is used
func (m *TypesStatusTasksState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesStatusTasksState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesStatusTasksState) UnmarshalBinary(b []byte) error {
	var res TypesStatusTasksState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
