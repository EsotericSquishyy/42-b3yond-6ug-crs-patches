// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesTaskDetail types task detail
//
// swagger:model types.TaskDetail
type TypesTaskDetail struct {

	// UNIX millisecond timestamp by which any submissions for this task must be in
	// Required: true
	Deadline *int64 `json:"deadline"`

	// The folder in the type repo source tarball containing the main project.
	//
	// This is the project the CRS is meant to submit vulns, patches, and SARIF assessments against.
	// Required: true
	Focus *string `json:"focus"`

	// harnesses included
	// Required: true
	HarnessesIncluded *bool `json:"harnesses_included"`

	// String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability
	// Required: true
	Metadata interface{} `json:"metadata"`

	// OSS Fuzz project name
	// Required: true
	ProjectName *string `json:"project_name"`

	// List of sources needed to evaluate a task
	// Required: true
	Source []*TypesSourceDetail `json:"source"`

	// task id
	// Required: true
	// Format: uuid
	TaskID *strfmt.UUID `json:"task_id"`

	// type
	// Required: true
	Type *TypesTaskType `json:"type"`
}

// Validate validates this types task detail
func (m *TypesTaskDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFocus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHarnessesIncluded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesTaskDetail) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("deadline", "body", m.Deadline); err != nil {
		return err
	}

	return nil
}

func (m *TypesTaskDetail) validateFocus(formats strfmt.Registry) error {

	if err := validate.Required("focus", "body", m.Focus); err != nil {
		return err
	}

	return nil
}

func (m *TypesTaskDetail) validateHarnessesIncluded(formats strfmt.Registry) error {

	if err := validate.Required("harnesses_included", "body", m.HarnessesIncluded); err != nil {
		return err
	}

	return nil
}

func (m *TypesTaskDetail) validateMetadata(formats strfmt.Registry) error {

	if m.Metadata == nil {
		return errors.Required("metadata", "body", nil)
	}

	return nil
}

func (m *TypesTaskDetail) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("project_name", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *TypesTaskDetail) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	for i := 0; i < len(m.Source); i++ {
		if swag.IsZero(m.Source[i]) { // not required
			continue
		}

		if m.Source[i] != nil {
			if err := m.Source[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesTaskDetail) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	if err := validate.FormatOf("task_id", "body", "uuid", m.TaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TypesTaskDetail) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types task detail based on the context it is used
func (m *TypesTaskDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesTaskDetail) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Source); i++ {

		if m.Source[i] != nil {

			if swag.IsZero(m.Source[i]) { // not required
				return nil
			}

			if err := m.Source[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesTaskDetail) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesTaskDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesTaskDetail) UnmarshalBinary(b []byte) error {
	var res TypesTaskDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
