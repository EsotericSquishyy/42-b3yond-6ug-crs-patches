// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesTaskType types task type
//
// swagger:model types.TaskType
type TypesTaskType string

func NewTypesTaskType(value TypesTaskType) *TypesTaskType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesTaskType.
func (m TypesTaskType) Pointer() *TypesTaskType {
	return &m
}

const (

	// TypesTaskTypeFull captures enum value "full"
	TypesTaskTypeFull TypesTaskType = "full"

	// TypesTaskTypeDelta captures enum value "delta"
	TypesTaskTypeDelta TypesTaskType = "delta"
)

// for schema
var typesTaskTypeEnum []interface{}

func init() {
	var res []TypesTaskType
	if err := json.Unmarshal([]byte(`["full","delta"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesTaskTypeEnum = append(typesTaskTypeEnum, v)
	}
}

func (m TypesTaskType) validateTypesTaskTypeEnum(path, location string, value TypesTaskType) error {
	if err := validate.EnumCase(path, location, value, typesTaskTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types task type
func (m TypesTaskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesTaskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types task type based on context it is used
func (m TypesTaskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
