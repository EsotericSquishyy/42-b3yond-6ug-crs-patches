diff --git a/src/main/java/com/zaxxer/hikari/util/PropertyElf.java b/src/main/java/com/zaxxer/hikari/util/PropertyElf.java
index e70034d..7797be0 100644
--- a/src/main/java/com/zaxxer/hikari/util/PropertyElf.java
+++ b/src/main/java/com/zaxxer/hikari/util/PropertyElf.java
@@ -128,19 +128,13 @@ public final class PropertyElf
    {
       final var logger = LoggerFactory.getLogger(PropertyElf.class);
 
-      // Use the English locale to avoid the infamous Turkish locale bug
+      // use the english locale to avoid the infamous turkish locale bug
       var methodName = "set" + propName.substring(0, 1).toUpperCase(Locale.ENGLISH) + propName.substring(1);
-      var writeMethod = methods.stream()
-            .filter(m -> m.getName().equals(methodName) && m.getParameterCount() == 1)
-            .findFirst()
-            .orElse(null);
+      var writeMethod = methods.stream().filter(m -> m.getName().equals(methodName) && m.getParameterCount() == 1).findFirst().orElse(null);
 
       if (writeMethod == null) {
          var methodName2 = "set" + propName.toUpperCase(Locale.ENGLISH);
-         writeMethod = methods.stream()
-                .filter(m -> m.getName().equals(methodName2) && m.getParameterCount() == 1)
-                .findFirst()
-                .orElse(null);
+         writeMethod = methods.stream().filter(m -> m.getName().equals(methodName2) && m.getParameterCount() == 1).findFirst().orElse(null);
       }
 
       if (writeMethod == null) {
@@ -149,63 +143,43 @@ public final class PropertyElf
       }
 
       try {
-        var paramClass = writeMethod.getParameterTypes()[0];
-        String value = propValue.toString();
-
-        if (paramClass == int.class) {
-            writeMethod.invoke(target, Integer.parseInt(value));
-        }
-        else if (paramClass == long.class) {
+         var paramClass = writeMethod.getParameterTypes()[0];
+         String value = propValue.toString();
+         if (paramClass == int.class) {
+            writeMethod.invoke(target, Integer.parseInt(propValue.toString()));
+         }
+         else if (paramClass == long.class) {
             writeMethod.invoke(target, parseDuration(value).map(Duration::toMillis).orElseGet(() -> Long.parseLong(value)));
-        }
-        else if (paramClass == short.class) {
+         }
+         else if (paramClass == short.class) {
             writeMethod.invoke(target, Short.parseShort(value));
-        }
-        else if (paramClass == boolean.class || paramClass == Boolean.class) {
+         }
+         else if (paramClass == boolean.class || paramClass == Boolean.class) {
             writeMethod.invoke(target, Boolean.parseBoolean(value));
-        }
-        else if (paramClass.isArray() && char.class.isAssignableFrom(paramClass.getComponentType())) {
+         }
+         else if (paramClass.isArray() && char.class.isAssignableFrom(paramClass.getComponentType())) {
             writeMethod.invoke(target, value.toCharArray());
-        }
-        else if (paramClass == String.class) {
+         }
+         else if (paramClass == String.class) {
             writeMethod.invoke(target, value);
-        }
-        else {
-            if (isBlockedClass(value)) {
-                logger.error("Blocked deserialization of: {}", value);
-                throw new SecurityException("Blocked deserialization of: " + value);
-            }
-
+         }
+         else {
             try {
-                logger.debug("Trying to create a new instance of \"{}\"", value);
-                writeMethod.invoke(target, Class.forName(value).getDeclaredConstructor().newInstance());
+               logger.debug("Try to create a new instance of \"{}\"", propValue);
+               writeMethod.invoke(target, Class.forName(propValue.toString()).getDeclaredConstructor().newInstance());
             }
             catch (InstantiationException | ClassNotFoundException e) {
-                logger.debug("Class \"{}\" not found or could not instantiate it (Default constructor)", value);
-                writeMethod.invoke(target, propValue);
+               logger.debug("Class \"{}\" not found or could not instantiate it (Default constructor)", propValue);
+               writeMethod.invoke(target, propValue);
             }
-        }
+         }
       }
       catch (Exception e) {
-        logger.error("Failed to set property {} on target {}", propName, target.getClass(), e);
-        throw new RuntimeException(e);
+         logger.error("Failed to set property {} on target {}", propName, target.getClass(), e);
+         throw new RuntimeException(e);
       }
    }
 
-   /**
-    * Blocks unsafe class names from being deserialized
-    */
-   private static boolean isBlockedClass(String className) {
-      return className.equals("jaz.Zer") ||  // Explicitly block attack class
-           className.startsWith("java.lang.reflect") || 
-           className.startsWith("jdk.internal.reflect") ||
-           className.startsWith("sun.") || 
-           className.contains("Proxy") || 
-           className.contains("CGLIB") || 
-           className.contains("$Unsafe") ||
-           className.startsWith("com.zaxxer.hikari.util.");  // Prevent injecting internal classes
-   }
-
    private static String capitalizedPropertyName(String propertyName)
    {
       // use the english locale to avoid the infamous turkish locale bug
