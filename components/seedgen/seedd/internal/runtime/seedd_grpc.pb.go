// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: seedd.proto

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeedD_RunSeeds_FullMethodName              = "/SeedD.SeedD/RunSeeds"
	SeedD_GetMergedCoverage_FullMethodName     = "/SeedD.SeedD/GetMergedCoverage"
	SeedD_GetRegionSource_FullMethodName       = "/SeedD.SeedD/GetRegionSource"
	SeedD_ExtractFunctionSource_FullMethodName = "/SeedD.SeedD/ExtractFunctionSource"
	SeedD_GetCallGraph_FullMethodName          = "/SeedD.SeedD/GetCallGraph"
	SeedD_GetFunctions_FullMethodName          = "/SeedD.SeedD/GetFunctions"
)

// SeedDClient is the client API for SeedD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedDClient interface {
	RunSeeds(ctx context.Context, in *RunSeedsRequest, opts ...grpc.CallOption) (*RunSeedsResponse, error)
	GetMergedCoverage(ctx context.Context, in *GetMergedCoverageRequest, opts ...grpc.CallOption) (*RunSeedsResponse, error)
	GetRegionSource(ctx context.Context, in *GetRegionSourceRequest, opts ...grpc.CallOption) (*GetRegionSourceResponse, error)
	ExtractFunctionSource(ctx context.Context, in *ExtractFunctionSourceRequest, opts ...grpc.CallOption) (*ExtractFunctionSourceResponse, error)
	GetCallGraph(ctx context.Context, in *GetCallGraphRequest, opts ...grpc.CallOption) (*GetCallGraphResponse, error)
	GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error)
}

type seedDClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedDClient(cc grpc.ClientConnInterface) SeedDClient {
	return &seedDClient{cc}
}

func (c *seedDClient) RunSeeds(ctx context.Context, in *RunSeedsRequest, opts ...grpc.CallOption) (*RunSeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunSeedsResponse)
	err := c.cc.Invoke(ctx, SeedD_RunSeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedDClient) GetMergedCoverage(ctx context.Context, in *GetMergedCoverageRequest, opts ...grpc.CallOption) (*RunSeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunSeedsResponse)
	err := c.cc.Invoke(ctx, SeedD_GetMergedCoverage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedDClient) GetRegionSource(ctx context.Context, in *GetRegionSourceRequest, opts ...grpc.CallOption) (*GetRegionSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionSourceResponse)
	err := c.cc.Invoke(ctx, SeedD_GetRegionSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedDClient) ExtractFunctionSource(ctx context.Context, in *ExtractFunctionSourceRequest, opts ...grpc.CallOption) (*ExtractFunctionSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractFunctionSourceResponse)
	err := c.cc.Invoke(ctx, SeedD_ExtractFunctionSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedDClient) GetCallGraph(ctx context.Context, in *GetCallGraphRequest, opts ...grpc.CallOption) (*GetCallGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCallGraphResponse)
	err := c.cc.Invoke(ctx, SeedD_GetCallGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedDClient) GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionsResponse)
	err := c.cc.Invoke(ctx, SeedD_GetFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeedDServer is the server API for SeedD service.
// All implementations must embed UnimplementedSeedDServer
// for forward compatibility.
type SeedDServer interface {
	RunSeeds(context.Context, *RunSeedsRequest) (*RunSeedsResponse, error)
	GetMergedCoverage(context.Context, *GetMergedCoverageRequest) (*RunSeedsResponse, error)
	GetRegionSource(context.Context, *GetRegionSourceRequest) (*GetRegionSourceResponse, error)
	ExtractFunctionSource(context.Context, *ExtractFunctionSourceRequest) (*ExtractFunctionSourceResponse, error)
	GetCallGraph(context.Context, *GetCallGraphRequest) (*GetCallGraphResponse, error)
	GetFunctions(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error)
	mustEmbedUnimplementedSeedDServer()
}

// UnimplementedSeedDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeedDServer struct{}

func (UnimplementedSeedDServer) RunSeeds(context.Context, *RunSeedsRequest) (*RunSeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSeeds not implemented")
}
func (UnimplementedSeedDServer) GetMergedCoverage(context.Context, *GetMergedCoverageRequest) (*RunSeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergedCoverage not implemented")
}
func (UnimplementedSeedDServer) GetRegionSource(context.Context, *GetRegionSourceRequest) (*GetRegionSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionSource not implemented")
}
func (UnimplementedSeedDServer) ExtractFunctionSource(context.Context, *ExtractFunctionSourceRequest) (*ExtractFunctionSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFunctionSource not implemented")
}
func (UnimplementedSeedDServer) GetCallGraph(context.Context, *GetCallGraphRequest) (*GetCallGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallGraph not implemented")
}
func (UnimplementedSeedDServer) GetFunctions(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctions not implemented")
}
func (UnimplementedSeedDServer) mustEmbedUnimplementedSeedDServer() {}
func (UnimplementedSeedDServer) testEmbeddedByValue()               {}

// UnsafeSeedDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedDServer will
// result in compilation errors.
type UnsafeSeedDServer interface {
	mustEmbedUnimplementedSeedDServer()
}

func RegisterSeedDServer(s grpc.ServiceRegistrar, srv SeedDServer) {
	// If the following call pancis, it indicates UnimplementedSeedDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeedD_ServiceDesc, srv)
}

func _SeedD_RunSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).RunSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_RunSeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).RunSeeds(ctx, req.(*RunSeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedD_GetMergedCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergedCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).GetMergedCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_GetMergedCoverage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).GetMergedCoverage(ctx, req.(*GetMergedCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedD_GetRegionSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).GetRegionSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_GetRegionSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).GetRegionSource(ctx, req.(*GetRegionSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedD_ExtractFunctionSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractFunctionSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).ExtractFunctionSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_ExtractFunctionSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).ExtractFunctionSource(ctx, req.(*ExtractFunctionSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedD_GetCallGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).GetCallGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_GetCallGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).GetCallGraph(ctx, req.(*GetCallGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedD_GetFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedDServer).GetFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedD_GetFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedDServer).GetFunctions(ctx, req.(*GetFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeedD_ServiceDesc is the grpc.ServiceDesc for SeedD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeedD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SeedD.SeedD",
	HandlerType: (*SeedDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunSeeds",
			Handler:    _SeedD_RunSeeds_Handler,
		},
		{
			MethodName: "GetMergedCoverage",
			Handler:    _SeedD_GetMergedCoverage_Handler,
		},
		{
			MethodName: "GetRegionSource",
			Handler:    _SeedD_GetRegionSource_Handler,
		},
		{
			MethodName: "ExtractFunctionSource",
			Handler:    _SeedD_ExtractFunctionSource_Handler,
		},
		{
			MethodName: "GetCallGraph",
			Handler:    _SeedD_GetCallGraph_Handler,
		},
		{
			MethodName: "GetFunctions",
			Handler:    _SeedD_GetFunctions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seedd.proto",
}
