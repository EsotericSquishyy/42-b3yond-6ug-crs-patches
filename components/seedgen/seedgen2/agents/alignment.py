import logging
from typing import List
from seedgen2.graphs.plainbot import Plainbot
from seedgen2.presets import SeedGen2GenerativeModel, SeedGen2InferModel
from seedgen2.graphs.sowbot import Sowbot, SowbotResult
from seedgen2.utils.grpc import SeedD
from seedgen2.utils.seeds import SeedFeedback
from seedgen2.utils.functions import FunctionInfo
from seedgen2.agents.predicates import get_related_functions

PROMPT_ALIGNMENT = """
I am working on a fuzzing project and have developed a Python script to generate test cases for a fuzzing harness. However, I noticed that the current script might be missing some details in the overall structure of a test case, as per the test case structure documentation. Therefore, I need your help to improve the script to generate more comprehensive and correct test cases.

You need to improve the script, so the test cases generated by the script will follow the required structure specified in the harness, as described in the documentation given below.
"""

CONTEXT_ALIGNMENT = """
## For context:
This is the current python script:
{script}

To help you understand the harness, this is the test case structure documentation that I mentioned:
{structure_documentation}
"""

PROMPT_GENERATE_STRUCTURE_DOCUMENTATION = """
Given the source code of a fuzzing harness, please analyze it and write down the required structure of the test cases.

As a result, you should write detailed structure documentation of the harness, consisting of a comprehensive and easily digestable plaintext description, including but not limited to:

- Headers or metadata fields and their characteristics.
- Specific data fields: location, type, encoding method, etc.
- Emphasize usage of common file types' contents within the test structure: their location, fields, specific requirements, etc.
- Other specific requirements.

Please ONLY give the detailed test case structure, and DO NOT include any concrete examples or guidance.

For context:
This is the source code of the all related functions in the harness:
{related_functions}
"""

PROMPT_IMPROVE_STRUCTURE_DOCUMENTATION = """
I am working on writing a documentation about the structure of a test case for a specific test harness. However, I've noticed that the current version of my documentation doesn't fully document everything that a test case requires. Therefore, I need your help to improve my test case structure documentation. Your tasks are:

- Analyze the source code of the harness and fully understand it.
- Find out the parts in the harness source that are not documented in the documentation, and add them to the documentation.
- Find out if there are any parts in the documentation that are incorrect, i.e. don't align with the source code, and correct them.

Please ONLY include the updated test case structure documentation in your response, and DO NOT include any concrete examples or guidance.

For context:
This is the source code of the all related functions in the harness:
{related_functions}

This is the current test case structure documentation:
{structure_documentation}
"""


def align_script(
        seedd: SeedD,
        script: str,
        structure_documentation: str,
        harness_binary: str
) -> SowbotResult:
    # Use generative model to improve the current script
    model = SeedGen2GenerativeModel().model
    prompt = PROMPT_ALIGNMENT
    context = CONTEXT_ALIGNMENT.format(
        script=script,
        structure_documentation=structure_documentation,
    )

    sowbot = Sowbot(seedd, harness_binary, model=model, include_example=False)

    return sowbot.run(prompt, context)


def update_doc(
        seedd: SeedD,
        seed_feedback: SeedFeedback,
        functions: List[FunctionInfo],
        harness_binary: str,
        previous_doc: str = "",
) -> str:
    related_functions = get_related_functions(
        seedd, functions, harness_binary, "LLVMFuzzerTestOneInput")

    model = SeedGen2InferModel().model

    if previous_doc == "":
        prompt = PROMPT_GENERATE_STRUCTURE_DOCUMENTATION.format(
            related_functions=related_functions
        )
    else:
        prompt = PROMPT_IMPROVE_STRUCTURE_DOCUMENTATION.format(
            related_functions=related_functions,
            structure_documentation=previous_doc
        )

    plainbot = Plainbot(model=model)
    return plainbot.run(prompt)


def update_doc_mini(
        harness_source: str,
        harness_binary: str,
        previous_doc: str = "",
) -> str:
    model = SeedGen2InferModel().model

    if previous_doc == "":
        prompt = PROMPT_GENERATE_STRUCTURE_DOCUMENTATION.format(
            related_functions=harness_source
        )
    else:
        prompt = PROMPT_IMPROVE_STRUCTURE_DOCUMENTATION.format(
            related_functions=harness_source,
            structure_documentation=previous_doc
        )

    plainbot = Plainbot(model=model)
    return plainbot.run(prompt)
